{"ast":null,"code":"import { HttpRequest, HttpHandler, HttpEvent, HttpErrorResponse } from '@angular/common/http';\nimport { catchError, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../services/error.service\";\nexport let AddTokenInterceptor = /*#__PURE__*/(() => {\n  class AddTokenInterceptor {\n    constructor(router, _errorService) {\n      this.router = router;\n      this._errorService = _errorService;\n    }\n\n    intercept(request, next) {\n      const token = localStorage.getItem('token');\n\n      if (token) {\n        request = request.clone({\n          setHeaders: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n      }\n\n      return next.handle(request).pipe(catchError(error => {\n        if (error.status === 401) {\n          this._errorService.msjError(error);\n\n          this.router.navigate(['/login']);\n        }\n\n        return throwError(() => error);\n      }));\n    }\n\n  }\n\n  AddTokenInterceptor.ɵfac = function AddTokenInterceptor_Factory(t) {\n    return new (t || AddTokenInterceptor)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.ErrorService));\n  };\n\n  AddTokenInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AddTokenInterceptor,\n    factory: AddTokenInterceptor.ɵfac\n  });\n  return AddTokenInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module"}